nmap.connect_scan = true
    nmap.os_fingerprint = true
    nmap.ports=[0..655]
    nmap.xml = current_scan_report_file_path
  end
end
def extract_data_from_report(report_file_path)
  Nmap::XML.new(report_file_path) do |xml|
    xml.each_host do |host|
      host.each_port do |port|
        p port
        report[host.ip] ||= {:open_ports => []}
        report[host.ip][:open_ports] <<  "#{port.number}/#{port.protocol}"
        report[host.ip][:open_ports] << "#{port.number}/#{port.protocol}"
        report[host.ip][:ip_id_sequence] = host.ip_id_sequence.description
      end
      report[host.ip][:os_match_linux_count] = host.os.find_all {|l| l.name.include?('Linux')}.count
        report[host.ip][:os_match_linux_count] = host.os.find_all {|l| l.name.include?('Linux')}.count
    end
  end
  return report
end

def is_scan_report_different_than_reference_report?(current_scan_report_file_path, reference_scan_output_path)
  current_report = extract_data_from_report(current_scan_report_file_path)
  reference_report = extract_data_from_report(reference_scan_output_path)
  p current_report
  p reference_report
   current_report = extract_data_from_report(current_scan_report_file_path)
   reference_report = extract_data_from_report(reference_scan_output_path)
   puts "current_report:" + "\n" "#{current_report}"
   puts "reference_report:" + "\n" "#{reference_report}"
  return current_report != reference_report end

scan(nmap_targets,current_scan_report_file_path) unless File.exist?(current_scan_report_file_path)
scan(nmap_target,current_scan_report_file_path) unless File.exist?(current_scan_report_file_path)

if(File.file?("#{reference_scan_output_path}"))
    scan(nmap_target,current_scan_report_file_path)
    is_scan_report_different_than_reference_report?(current_scan_report_file_path, reference_scan_output_path)  else
    scan(nmap_target,current_scan_report_file_path)
    File.rename("#{current_scan_report_file_path}", "#{reference_scan_output_path}")
    extract_data_from_reference_scan_output = extract_data_from_report(reference_scan_output_path)
    puts "raport from latest scan:" + "\n" "#{extract_data_from_reference_scan_output}"
 end

puts "comparing scan: #{current_scan_report_file_path} with reference report"
if is_scan_report_different_than_reference_report?(current_scan_report_file_path, reference_scan_output_path)
    report = "Please check why current state is different than accepted"
    Mail.deliver do
if is_scan_report_different_than_reference_report?(current_scan_report_file_path
else
  puts 'OK'
end
end
